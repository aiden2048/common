// Code generated by goctl. DO NOT EDIT.
package configModel

import (
	"context"
	"time"

	"fmt"
	"github.com/aiden2048/pkg/public/mongodb"
	"go.mongodb.org/mongo-driver/bson"

	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// 配置信息
var (
	cConfigDbName = "mg_config_%d"
	cConfigTbName = "c_config"
)

// 索引
var cConfigIndexKey = []string{
	"app_id",
}
var cConfigOpIndexKey = []string{}
var cConfigUniqueIndexKey = []string{
	"plat_id,app_id,key",
}
var cConfigExpireIndexKey = []string{}

// 表结构

type CConfig struct {
	ID        primitive.ObjectID `json:"_id,omitempty" bson:"_id"`
	PlatId    int32              `json:"plat_id" bson:"plat_id"`
	AppId     int32              `json:"app_id" bson:"app_id"`
	Type      int64              `json:"type" bson:"type"`   //  0没有归类 1运营配置 2财务配置 3防刷配置 4弹窗配置
	Key       string             `json:"key" bson:"key"`     //  key
	Value     string             `json:"value" bson:"value"` //  value
	Desc      string             `json:"desc" bson:"desc"`   //  备注
	Opt       int64              `json:"opt" bson:"opt"`     //  操作人
	Idate     int64              `json:"idate,omitempty" bson:"idate,omitempty"`
	CreatedAt time.Time          `json:"created_at,omitempty" bson:"created_at"`
	UpdatedAt time.Time          `json:"updated_at,omitempty" bson:"updated_at"`
}

type defaultCConfigModelFromImage struct {
	Model[CConfig]
}

// NewCConfigModelFromImage returns a model for the mongo image repository.
func NewCConfigModelFromImage(dbPar1 int64) *defaultCConfigModelFromImage {
	db := fmt.Sprintf(cConfigDbName, dbPar1)
	tb := cConfigTbName
	conn := mongodb.NewMon(db, tb, false, cConfigIndexKey, cConfigUniqueIndexKey, cConfigExpireIndexKey, ImageRepositoryKey)
	model := &defaultCConfigModelFromImage{}
	model.conn = conn
	model.cache = false
	model.NeedLog = true

	conn.ReportMongoIndex(cConfigOpIndexKey, cConfigExpireIndexKey, 1752138331, 0)
	return model
}

type defaultCConfigModel struct {
	Model[CConfig]
}

// NewCConfigModel returns a model for the mongo.
func NewCConfigModel(dbPar1 int64) *defaultCConfigModel {
	db := fmt.Sprintf(cConfigDbName, dbPar1)
	tb := cConfigTbName
	conn := mongodb.NewMon(db, tb, false, cConfigIndexKey, cConfigUniqueIndexKey, cConfigExpireIndexKey, ConfKey)
	model := &defaultCConfigModel{}
	model.conn = conn
	model.cache = false
	model.NeedLog = true

	conn.ReportMongoIndex(cConfigOpIndexKey, cConfigExpireIndexKey, 1752138331, 0)
	return model
}

func (m *defaultCConfigModel) IgnoreConflictInsertOne(ctx context.Context, data *CConfig) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
	}
	if data.CreatedAt.IsZero() {
		data.CreatedAt = time.Now()
	}
	data.UpdatedAt = data.CreatedAt
	err := m.conn.IgnoreConflictInsertOne(ctx, data)
	return err
}

func (m *defaultCConfigModel) InsertOne(ctx context.Context, data *CConfig) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
	}
	if data.CreatedAt.IsZero() {
		data.CreatedAt = time.Now()
	}
	data.UpdatedAt = data.CreatedAt

	err := m.conn.InsertOne(ctx, data)
	return err
}
func (m *defaultCConfigModel) InsertMany(ctx context.Context, datas []*CConfig) error {
	ins := []any{}
	for _, data := range datas {
		if data.ID.IsZero() {
			data.ID = primitive.NewObjectID()
		}
		if data.CreatedAt.IsZero() {
			data.CreatedAt = time.Now()
		}
		data.UpdatedAt = data.CreatedAt

		ins = append(ins, data)
	}
	err := m.conn.InsertMany(ctx, ins)
	return err
}

func (m *defaultCConfigModel) Update(ctx context.Context, data *CConfig) error {
	dataB, err := mongodb.ToBsonM(data)
	if err != nil {
		return err
	}

	dataB["updated_at"] = time.Now()
	err = m.conn.UpdateOne(ctx, bson.M{"_id": dataB["_id"]}, bson.M{"$set": dataB})

	return err
}

func (m *defaultCConfigModel) UpdateOne(ctx context.Context, filter any, data bson.M) error {
	var err error

	data["updated_at"] = time.Now()
	err = m.conn.UpdateOne(ctx, filter, bson.M{"$set": data})

	return err
}

func (m *defaultCConfigModel) UpdateMany(ctx context.Context, filter any, data bson.M) error {
	var err error

	data["updated_at"] = time.Now()
	err = m.conn.UpdateMany(ctx, filter, bson.M{"$set": data})

	return err
}

func (m *defaultCConfigModel) UpSert(ctx context.Context, filter any, data bson.M) error {
	var err error

	data["updated_at"] = time.Now()
	indata := bson.M{"created_at": time.Now()}

	err = m.conn.UpSert(ctx, filter, bson.M{"$set": data, "$setOnInsert": indata})

	return err
}

func (m *defaultCConfigModel) UpInc(ctx context.Context, filter any, data bson.M) error {
	var err error

	indata := bson.M{"created_at": time.Now()}

	err = m.conn.UpSert(ctx, filter, bson.M{"$inc": data, "$set": bson.M{"updated_at": time.Now()}, "$setOnInsert": indata})

	return err
}

func (m *defaultCConfigModel) UpAndIncWithRes(ctx context.Context, filter any, data, incdata bson.M) (*mongo.UpdateResult, error) {
	var err error

	data["updated_at"] = time.Now()
	indata := bson.M{"created_at": time.Now()}

	res, err := m.conn.UpSertWithRes(ctx, filter, bson.M{"$set": data, "$inc": incdata, "$setOnInsert": indata})

	return res, err
}

func (m *defaultCConfigModel) UpAndInc(ctx context.Context, filter any, data, incdata bson.M) error {
	var err error

	data["updated_at"] = time.Now()
	indata := bson.M{"created_at": time.Now()}

	err = m.conn.UpSert(ctx, filter, bson.M{"$set": data, "$inc": incdata, "$setOnInsert": indata})

	return err
}
func (m *defaultCConfigModel) UpdateOneByID(ctx context.Context, id string, data bson.M) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}

	data["updated_at"] = time.Now()
	err = m.conn.UpdateOne(ctx, bson.M{"_id": oid}, bson.M{"$set": data})

	return err
}
func (m *defaultCConfigModel) DeleteOne(ctx context.Context, filter any) error {
	var err error

	err = m.conn.DeleteOne(ctx, filter)

	return err
}
func (m *defaultCConfigModel) DeleteOneByID(ctx context.Context, id string) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}

	err = m.conn.DeleteOne(ctx, bson.M{"_id": oid})

	return err
}
func (m *defaultCConfigModel) DeleteMany(ctx context.Context, filter any) error {
	var err error

	err = m.conn.DeleteMany(ctx, filter)

	return err
}

func (m *defaultCConfigModel) FindOneByPlatIdAppIdKey(ctx context.Context, PlatId any, AppId any, Key string) (*CConfig, error) {
	var data = CConfig{}
	var filter = bson.M{}

	filter["plat_id"] = PlatId
	filter["app_id"] = AppId
	filter["key"] = Key
	err := m.conn.FindOne(ctx, filter, &data)
	switch err {
	case nil:
		return &data, nil
	case mongo.ErrNoDocuments:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCConfigModel) FindManyByAppId(ctx context.Context, where bson.M, sort bson.D, limit int64, selectors ...any) ([]*CConfig, error) {
	var filter = mongodb.Filter{}
	if _, ok := where["app_id"]; ok {
		filter.Add("app_id", where["app_id"])
	}
	cursor, err := m.conn.FindManyV1(ctx, filter, sort, limit, selectors...)
	if err != nil {
		switch err {
		case mongo.ErrNoDocuments:
			return nil, ErrNotFound
		default:
			return nil, err
		}
	}
	defer cursor.Close(ctx)
	data := m.Decode(ctx, cursor, filter)
	return data, nil
}

func (m *defaultCConfigModel) FindManyPageByAppId(ctx context.Context, where bson.M, sort bson.D, page, pageSize int64, selectors ...any) ([]*CConfig, error) {
	var filter = mongodb.Filter{}
	if _, ok := where["app_id"]; ok {
		filter.Add("app_id", where["app_id"])
	}
	skip := (page - 1) * pageSize
	if skip < 0 {
		skip = 0
	}
	cursor, err := m.conn.FindManyByPageV1(ctx, filter, sort, skip, pageSize, selectors...)
	if err != nil {
		switch err {
		case mongo.ErrNoDocuments:
			return nil, ErrNotFound
		default:
			return nil, err
		}
	}
	defer cursor.Close(ctx)
	data := m.Decode(ctx, cursor, filter)
	return data, nil
}

func (m *defaultCConfigModel) FindAllByAppId(ctx context.Context, where bson.M, sort bson.D, selectors ...any) ([]*CConfig, error) {
	var filter = mongodb.Filter{}
	if _, ok := where["app_id"]; ok {
		filter.Add("app_id", where["app_id"])
	}
	cursor, err := m.conn.FindAllBySortV1(ctx, filter, sort, selectors...)
	if err != nil {
		switch err {
		case mongo.ErrNoDocuments:
			return nil, ErrNotFound
		default:
			return nil, err
		}
	}
	defer cursor.Close(ctx)
	data := m.Decode(ctx, cursor, filter)
	return data, nil
}

func (m *defaultCConfigModel) UpdateOneByPlatIdAppIdKey(ctx context.Context, PlatId any, AppId any, Key string, data bson.M) error {
	var filter = bson.M{}

	filter["plat_id"] = PlatId
	filter["app_id"] = AppId
	filter["key"] = Key
	data["updated_at"] = time.Now()
	err := m.conn.UpdateOne(ctx, filter, bson.M{"$set": data})
	return err
}

func (m *defaultCConfigModel) DeleteOneByPlatIdAppIdKey(ctx context.Context, PlatId any, AppId any, Key string) error {
	var filter = bson.M{}

	filter["plat_id"] = PlatId
	filter["app_id"] = AppId
	filter["key"] = Key
	err := m.conn.DeleteOne(ctx, filter)
	return err
}

func (m *defaultCConfigModel) CreateOpIndex(ctx context.Context) {
	m.conn.CreatIndexByIndexKey(ctx, cConfigOpIndexKey)
}
