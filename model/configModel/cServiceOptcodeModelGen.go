// Code generated by goctl. DO NOT EDIT.
package configModel

import (
	"context"
	"time"

	"fmt"
	"github.com/aiden2048/pkg/public/mongodb"
	"go.mongodb.org/mongo-driver/bson"

	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

var (
	cServiceOptcodeDbName = "mg_config_%d"
	cServiceOptcodeTbName = "c_service_optcode"
)

// 索引
var cServiceOptcodeIndexKey = []string{
	"updated_at",
}
var cServiceOptcodeOpIndexKey = []string{}
var cServiceOptcodeUniqueIndexKey = []string{
	"app_id,code",
}
var cServiceOptcodeExpireIndexKey = []string{}

// 表结构

type CServiceOptcode struct {
	ID        primitive.ObjectID `json:"_id,omitempty" bson:"_id"`
	PlatId    int32              `json:"plat_id" bson:"plat_id"`
	AppId     int32              `json:"app_id" bson:"app_id"`
	Code      int                `json:"code" bson:"code"`     // 账变类型代码
	Name      string             `json:"name" bson:"name"`     // 类型名称
	Status    int                `json:"status" bson:"status"` // 状态
	Desc      string             `json:"desc" bson:"desc"`     // 说明
	Class     int                `json:"class" bson:"class"`   // 分类
	Wallet    int                `json:"wallet" bson:"wallet"` // 钱包
	Idate     int64              `json:"idate,omitempty" bson:"idate,omitempty"`
	CreatedAt time.Time          `json:"created_at,omitempty" bson:"created_at"`
	UpdatedAt time.Time          `json:"updated_at,omitempty" bson:"updated_at"`
}

type defaultCServiceOptcodeModelFromImage struct {
	Model[CServiceOptcode]
}

// NewCServiceOptcodeModelFromImage returns a model for the mongo image repository.
func NewCServiceOptcodeModelFromImage(dbPar1 int64) *defaultCServiceOptcodeModelFromImage {
	db := fmt.Sprintf(cServiceOptcodeDbName, dbPar1)
	tb := cServiceOptcodeTbName
	conn := mongodb.NewMon(db, tb, false, cServiceOptcodeIndexKey, cServiceOptcodeUniqueIndexKey, cServiceOptcodeExpireIndexKey, ImageRepositoryKey)
	model := &defaultCServiceOptcodeModelFromImage{}
	model.conn = conn
	model.cache = false
	model.NeedLog = true

	conn.ReportMongoIndex(cServiceOptcodeOpIndexKey, cServiceOptcodeExpireIndexKey, 1752138324, 0)
	return model
}

type defaultCServiceOptcodeModel struct {
	Model[CServiceOptcode]
}

// NewCServiceOptcodeModel returns a model for the mongo.
func NewCServiceOptcodeModel(dbPar1 int64) *defaultCServiceOptcodeModel {
	db := fmt.Sprintf(cServiceOptcodeDbName, dbPar1)
	tb := cServiceOptcodeTbName
	conn := mongodb.NewMon(db, tb, false, cServiceOptcodeIndexKey, cServiceOptcodeUniqueIndexKey, cServiceOptcodeExpireIndexKey, ConfKey)
	model := &defaultCServiceOptcodeModel{}
	model.conn = conn
	model.cache = false
	model.NeedLog = true

	conn.ReportMongoIndex(cServiceOptcodeOpIndexKey, cServiceOptcodeExpireIndexKey, 1752138324, 0)
	return model
}

func (m *defaultCServiceOptcodeModel) IgnoreConflictInsertOne(ctx context.Context, data *CServiceOptcode) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
	}
	if data.CreatedAt.IsZero() {
		data.CreatedAt = time.Now()
	}
	data.UpdatedAt = data.CreatedAt
	err := m.conn.IgnoreConflictInsertOne(ctx, data)
	return err
}

func (m *defaultCServiceOptcodeModel) InsertOne(ctx context.Context, data *CServiceOptcode) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
	}
	if data.CreatedAt.IsZero() {
		data.CreatedAt = time.Now()
	}
	data.UpdatedAt = data.CreatedAt

	err := m.conn.InsertOne(ctx, data)
	return err
}
func (m *defaultCServiceOptcodeModel) InsertMany(ctx context.Context, datas []*CServiceOptcode) error {
	ins := []any{}
	for _, data := range datas {
		if data.ID.IsZero() {
			data.ID = primitive.NewObjectID()
		}
		if data.CreatedAt.IsZero() {
			data.CreatedAt = time.Now()
		}
		data.UpdatedAt = data.CreatedAt

		ins = append(ins, data)
	}
	err := m.conn.InsertMany(ctx, ins)
	return err
}

func (m *defaultCServiceOptcodeModel) Update(ctx context.Context, data *CServiceOptcode) error {
	dataB, err := mongodb.ToBsonM(data)
	if err != nil {
		return err
	}

	dataB["updated_at"] = time.Now()
	err = m.conn.UpdateOne(ctx, bson.M{"_id": dataB["_id"]}, bson.M{"$set": dataB})

	return err
}

func (m *defaultCServiceOptcodeModel) UpdateOne(ctx context.Context, filter any, data bson.M) error {
	var err error

	data["updated_at"] = time.Now()
	err = m.conn.UpdateOne(ctx, filter, bson.M{"$set": data})

	return err
}

func (m *defaultCServiceOptcodeModel) UpdateMany(ctx context.Context, filter any, data bson.M) error {
	var err error

	data["updated_at"] = time.Now()
	err = m.conn.UpdateMany(ctx, filter, bson.M{"$set": data})

	return err
}

func (m *defaultCServiceOptcodeModel) UpSert(ctx context.Context, filter any, data bson.M) error {
	var err error

	data["updated_at"] = time.Now()
	indata := bson.M{"created_at": time.Now()}

	err = m.conn.UpSert(ctx, filter, bson.M{"$set": data, "$setOnInsert": indata})

	return err
}

func (m *defaultCServiceOptcodeModel) UpInc(ctx context.Context, filter any, data bson.M) error {
	var err error

	indata := bson.M{"created_at": time.Now()}

	err = m.conn.UpSert(ctx, filter, bson.M{"$inc": data, "$set": bson.M{"updated_at": time.Now()}, "$setOnInsert": indata})

	return err
}

func (m *defaultCServiceOptcodeModel) UpAndIncWithRes(ctx context.Context, filter any, data, incdata bson.M) (*mongo.UpdateResult, error) {
	var err error

	data["updated_at"] = time.Now()
	indata := bson.M{"created_at": time.Now()}

	res, err := m.conn.UpSertWithRes(ctx, filter, bson.M{"$set": data, "$inc": incdata, "$setOnInsert": indata})

	return res, err
}

func (m *defaultCServiceOptcodeModel) UpAndInc(ctx context.Context, filter any, data, incdata bson.M) error {
	var err error

	data["updated_at"] = time.Now()
	indata := bson.M{"created_at": time.Now()}

	err = m.conn.UpSert(ctx, filter, bson.M{"$set": data, "$inc": incdata, "$setOnInsert": indata})

	return err
}
func (m *defaultCServiceOptcodeModel) UpdateOneByID(ctx context.Context, id string, data bson.M) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}

	data["updated_at"] = time.Now()
	err = m.conn.UpdateOne(ctx, bson.M{"_id": oid}, bson.M{"$set": data})

	return err
}
func (m *defaultCServiceOptcodeModel) DeleteOne(ctx context.Context, filter any) error {
	var err error

	err = m.conn.DeleteOne(ctx, filter)

	return err
}
func (m *defaultCServiceOptcodeModel) DeleteOneByID(ctx context.Context, id string) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}

	err = m.conn.DeleteOne(ctx, bson.M{"_id": oid})

	return err
}
func (m *defaultCServiceOptcodeModel) DeleteMany(ctx context.Context, filter any) error {
	var err error

	err = m.conn.DeleteMany(ctx, filter)

	return err
}

func (m *defaultCServiceOptcodeModel) FindOneByAppIdCode(ctx context.Context, AppId any, Code int) (*CServiceOptcode, error) {
	var data = CServiceOptcode{}
	var filter = bson.M{}

	filter["app_id"] = AppId
	filter["code"] = Code
	err := m.conn.FindOne(ctx, filter, &data)
	switch err {
	case nil:
		return &data, nil
	case mongo.ErrNoDocuments:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCServiceOptcodeModel) FindManyByUpdatedAt(ctx context.Context, where bson.M, sort bson.D, limit int64, selectors ...any) ([]*CServiceOptcode, error) {
	var filter = mongodb.Filter{}
	if _, ok := where["updated_at"]; ok {
		filter.Add("updated_at", where["updated_at"])
	}
	cursor, err := m.conn.FindManyV1(ctx, filter, sort, limit, selectors...)
	if err != nil {
		switch err {
		case mongo.ErrNoDocuments:
			return nil, ErrNotFound
		default:
			return nil, err
		}
	}
	defer cursor.Close(ctx)
	data := m.Decode(ctx, cursor, filter)
	return data, nil
}

func (m *defaultCServiceOptcodeModel) FindManyPageByUpdatedAt(ctx context.Context, where bson.M, sort bson.D, page, pageSize int64, selectors ...any) ([]*CServiceOptcode, error) {
	var filter = mongodb.Filter{}
	if _, ok := where["updated_at"]; ok {
		filter.Add("updated_at", where["updated_at"])
	}
	skip := (page - 1) * pageSize
	if skip < 0 {
		skip = 0
	}
	cursor, err := m.conn.FindManyByPageV1(ctx, filter, sort, skip, pageSize, selectors...)
	if err != nil {
		switch err {
		case mongo.ErrNoDocuments:
			return nil, ErrNotFound
		default:
			return nil, err
		}
	}
	defer cursor.Close(ctx)
	data := m.Decode(ctx, cursor, filter)
	return data, nil
}

func (m *defaultCServiceOptcodeModel) FindAllByUpdatedAt(ctx context.Context, where bson.M, sort bson.D, selectors ...any) ([]*CServiceOptcode, error) {
	var filter = mongodb.Filter{}
	if _, ok := where["updated_at"]; ok {
		filter.Add("updated_at", where["updated_at"])
	}
	cursor, err := m.conn.FindAllBySortV1(ctx, filter, sort, selectors...)
	if err != nil {
		switch err {
		case mongo.ErrNoDocuments:
			return nil, ErrNotFound
		default:
			return nil, err
		}
	}
	defer cursor.Close(ctx)
	data := m.Decode(ctx, cursor, filter)
	return data, nil
}

func (m *defaultCServiceOptcodeModel) UpdateOneByAppIdCode(ctx context.Context, AppId any, Code int, data bson.M) error {
	var filter = bson.M{}

	filter["app_id"] = AppId
	filter["code"] = Code
	data["updated_at"] = time.Now()
	err := m.conn.UpdateOne(ctx, filter, bson.M{"$set": data})
	return err
}

func (m *defaultCServiceOptcodeModel) DeleteOneByAppIdCode(ctx context.Context, AppId any, Code int) error {
	var filter = bson.M{}

	filter["app_id"] = AppId
	filter["code"] = Code
	err := m.conn.DeleteOne(ctx, filter)
	return err
}

func (m *defaultCServiceOptcodeModel) CreateOpIndex(ctx context.Context) {
	m.conn.CreatIndexByIndexKey(ctx, cServiceOptcodeOpIndexKey)
}
