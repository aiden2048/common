// Code generated by goctl. DO NOT EDIT.
package configModel

import (
	"context"
	"time"

	"fmt"

	"github.com/aiden2048/pkg/public/mongodb"
	"go.mongodb.org/mongo-driver/bson"

	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

const (
	DisplayGameCurrModeNil          = 0
	DisplayGameCurrModeCustomize    = 1
	DisplayGameCurrModeFixedAppCurr = 2
)

var (
	cAppsDbName = "mg_config_%d"
	cAppsTbName = "c_apps"
)

// 索引
var cAppsIndexKey = []string{}
var cAppsOpIndexKey = []string{}
var cAppsUniqueIndexKey = []string{
	"app_id",
}
var cAppsExpireIndexKey = []string{}

// 表结构

type CApps struct {
	ID                    primitive.ObjectID `json:"_id,omitempty" bson:"_id"`
	PlatId                int32              `json:"plat_id" bson:"plat_id"`
	AppId                 int32              `json:"app_id" bson:"app_id"`
	Name                  string             `json:"name" bson:"name"`                                         //required, 名称, 手动输入 盘口名字
	Code                  string             `json:"code" bson:"code"`                                         //required, Code, 盘口别名 类似 MB  用于自动生成后台账户名字前缀 外接游戏进入时候用户名
	WalletType            int                `json:"wallet_type" bson:"wallet_type"`                           //required, 钱包类型,default=0
	ExchangeBonus         int                `json:"exchange_bonus" bson:"exchange_bonus"`                     //required, 彩金兑出倍数限制,default=0,  0 不限制全部兑出，n 获取彩金的n倍兑出
	ExchangeOverBonusCode int                `json:"exchange_over_bonus_code" bson:"exchange_over_bonus_code"` //required, 彩金兑出多余彩金打码倍数,default=0,  0 直接清空多余彩金 n 重新添加彩金并且添加n倍打码
	ManualExchangeBonus   int                `json:"manual_exchange_bonus" bson:"manual_exchange_bonus"`       //required, 彩金兑换方式,default=0,  0:自动，1:手动
	Desc                  string             `json:"desc" bson:"desc"`                                         //说明, 盘口备注,一般用于说明盘口谁介绍来的
	Status                int                `json:"status" bson:"status"`                                     //required,default=1, 状态, 0:关闭 1:正常 2:只开启后台,enum=0,enum=1,enum=2,default=1
	PointRatio            int                `json:"point_ratio" bson:"point_ratio"`                           //法币精度, APP的法币精度比例，默认10000金币:1RMB,default=10000
	Currency              string             `json:"currency" bson:"currency"`                                 //货币代码, APP的基础货币代码
	PointType             int32              `json:"point_type" bson:"point_type"`                             //钱包币种id, 钱包币种id
	Country               string             `json:"country" bson:"country"`                                   //国家
	TimeZone              int32              `json:"time_zone" bson:"time_zone"`                               //时区(-12~+12)
	Lang                  []int32            `json:"lang" bson:"lang"`                                         //required, 支持语言, 语言ID数组  枚举 https://bjmqf12dh24.sg.larksuite.com/wiki/MKDawIHqQirhtTk4QPhlV9Ing9g
	UsdtRate              float64            `json:"usdt_rate" bson:"usdt_rate"`                               //default=1, 换U汇率, 用来计算包网账单
	SaleType              int                `json:"sale_type" bson:"sale_type"`                               //default=0, 包网分类, 数字自定义分类; 0对内 1合作 2对外
	Owner                 string             `json:"owner" bson:"owner"`                                       //包主信息
	ServerCost            int                `json:"server_cost" bson:"server_cost"`                           //default=10000, 服务器费用(美元), 按月付款
	SmsCost               float64            `json:"sms_cost" bson:"sms_cost"`                                 //default=0.015, 短信单价(美元)
	ExtGameRate           int                `json:"ext_game_rate" bson:"ext_game_rate"`                       //default=40, 技术服务费(千分之), *1000(千分之);统一收取;包括自研游戏
	Idate                 int64              `json:"idate,omitempty" bson:"idate,omitempty"`
	CreatedAt             time.Time          `json:"created_at,omitempty" bson:"created_at"`
	UpdatedAt             time.Time          `json:"updated_at,omitempty" bson:"updated_at"`
}
type AppCountryInfo struct {
	Acode         string `json:"acode" bson:"acode"`                     // 区号
	CountryName   string `json:"country_name" bson:"country_name"`       // 国家名称
	CountryCode   string `json:"country_code" bson:"country_code"`       // 国家缩写
	FiatPointType int32  `json:"fiat_point_type" bson:"fiat_point_type"` // 法币币种
	FiatPointIcon string `json:"fiat_point_icon" bson:"fiat_point_icon"` // 盘口货币icon
}

type defaultCAppsModelFromImage struct {
	Model[CApps]
}

// NewCAppsModelFromImage returns a model for the mongo image repository.
func NewCAppsModelFromImage(dbPar1 int64) *defaultCAppsModelFromImage {
	db := fmt.Sprintf(cAppsDbName, dbPar1)
	tb := cAppsTbName
	conn := mongodb.NewMon(db, tb, false, cAppsIndexKey, cAppsUniqueIndexKey, cAppsExpireIndexKey)
	conn.SetDbKey(ImageRepositoryKey)
	model := &defaultCAppsModelFromImage{}
	model.conn = conn
	model.cache = false
	model.NeedLog = true

	conn.ReportMongoIndex(cAppsOpIndexKey, cAppsExpireIndexKey, 1741360774, 0)
	return model
}

type defaultCAppsModel struct {
	Model[CApps]
}

// NewCAppsModel returns a model for the mongo.
func NewCAppsModel(dbPar1 int64) *defaultCAppsModel {
	db := fmt.Sprintf(cAppsDbName, dbPar1)
	tb := cAppsTbName
	conn := mongodb.NewMon(db, tb, false, cAppsIndexKey, cAppsUniqueIndexKey, cAppsExpireIndexKey, ConfKey)
	model := &defaultCAppsModel{}
	model.conn = conn
	model.cache = false
	model.NeedLog = true

	conn.ReportMongoIndex(cAppsOpIndexKey, cAppsExpireIndexKey, 1741360774, 0)
	return model
}

func (m *defaultCAppsModel) IgnoreConflictInsertOne(ctx context.Context, data *CApps) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
	}
	if data.CreatedAt.IsZero() {
		data.CreatedAt = time.Now()
	}
	data.UpdatedAt = data.CreatedAt
	err := m.conn.IgnoreConflictInsertOne(ctx, data)
	return err
}

func (m *defaultCAppsModel) InsertOne(ctx context.Context, data *CApps) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
	}
	if data.CreatedAt.IsZero() {
		data.CreatedAt = time.Now()
	}
	data.UpdatedAt = data.CreatedAt

	err := m.conn.InsertOne(ctx, data)
	return err
}
func (m *defaultCAppsModel) InsertMany(ctx context.Context, datas []*CApps) error {
	ins := []any{}
	for _, data := range datas {
		if data.ID.IsZero() {
			data.ID = primitive.NewObjectID()
		}
		if data.CreatedAt.IsZero() {
			data.CreatedAt = time.Now()
		}
		data.UpdatedAt = data.CreatedAt

		ins = append(ins, data)
	}
	err := m.conn.InsertMany(ctx, ins)
	return err
}

func (m *defaultCAppsModel) Update(ctx context.Context, data *CApps) error {
	dataB, err := mongodb.ToBsonM(data)
	if err != nil {
		return err
	}

	dataB["updated_at"] = time.Now()
	err = m.conn.UpdateOne(ctx, bson.M{"_id": dataB["_id"]}, bson.M{"$set": dataB})

	return err
}

func (m *defaultCAppsModel) UpdateOne(ctx context.Context, filter any, data bson.M) error {
	var err error

	data["updated_at"] = time.Now()
	err = m.conn.UpdateOne(ctx, filter, bson.M{"$set": data})

	return err
}

func (m *defaultCAppsModel) UpdateMany(ctx context.Context, filter any, data bson.M) error {
	var err error

	data["updated_at"] = time.Now()
	err = m.conn.UpdateMany(ctx, filter, bson.M{"$set": data})

	return err
}

func (m *defaultCAppsModel) UpSert(ctx context.Context, filter any, data bson.M) error {
	var err error

	data["updated_at"] = time.Now()
	indata := bson.M{"created_at": time.Now()}

	err = m.conn.UpSert(ctx, filter, bson.M{"$set": data, "$setOnInsert": indata})

	return err
}

func (m *defaultCAppsModel) UpInc(ctx context.Context, filter any, data bson.M) error {
	var err error

	indata := bson.M{"created_at": time.Now()}

	err = m.conn.UpSert(ctx, filter, bson.M{"$inc": data, "$set": bson.M{"updated_at": time.Now()}, "$setOnInsert": indata})

	return err
}

func (m *defaultCAppsModel) UpAndIncWithRes(ctx context.Context, filter any, data, incdata bson.M) (*mongo.UpdateResult, error) {
	var err error

	data["updated_at"] = time.Now()
	indata := bson.M{"created_at": time.Now()}

	res, err := m.conn.UpSertWithRes(ctx, filter, bson.M{"$set": data, "$inc": incdata, "$setOnInsert": indata})

	return res, err
}

func (m *defaultCAppsModel) UpAndInc(ctx context.Context, filter any, data, incdata bson.M) error {
	var err error

	data["updated_at"] = time.Now()
	indata := bson.M{"created_at": time.Now()}

	err = m.conn.UpSert(ctx, filter, bson.M{"$set": data, "$inc": incdata, "$setOnInsert": indata})

	return err
}
func (m *defaultCAppsModel) UpdateOneByID(ctx context.Context, id string, data bson.M) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}

	data["updated_at"] = time.Now()
	err = m.conn.UpdateOne(ctx, bson.M{"_id": oid}, bson.M{"$set": data})

	return err
}
func (m *defaultCAppsModel) DeleteOne(ctx context.Context, filter any) error {
	var err error

	err = m.conn.DeleteOne(ctx, filter)

	return err
}
func (m *defaultCAppsModel) DeleteOneByID(ctx context.Context, id string) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}

	err = m.conn.DeleteOne(ctx, bson.M{"_id": oid})

	return err
}
func (m *defaultCAppsModel) DeleteMany(ctx context.Context, filter any) error {
	var err error

	err = m.conn.DeleteMany(ctx, filter)

	return err
}

func (m *defaultCAppsModel) FindOneByAppId(ctx context.Context, AppId int32) (*CApps, error) {
	var data = CApps{}
	var filter = bson.M{}

	filter["app_id"] = AppId
	err := m.conn.FindOne(ctx, filter, &data)
	switch err {
	case nil:
		return &data, nil
	case mongo.ErrNoDocuments:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCAppsModel) UpdateOneByAppId(ctx context.Context, AppId int32, data bson.M) error {
	var filter = bson.M{}

	filter["app_id"] = AppId
	data["updated_at"] = time.Now()
	err := m.conn.UpdateOne(ctx, filter, bson.M{"$set": data})
	return err
}

func (m *defaultCAppsModel) DeleteOneByAppId(ctx context.Context, AppId int32) error {
	var filter = bson.M{}

	filter["app_id"] = AppId
	err := m.conn.DeleteOne(ctx, filter)
	return err
}

func (m *defaultCAppsModel) CreateOpIndex(ctx context.Context) {
	m.conn.CreatIndexByIndexKey(ctx, cAppsOpIndexKey)
}
